/* LENGTH*/

    // Standard 2-8-2 Length
    switch (FEAT_TRAINS, SELF, sw_0_series_length_standard, position_in_consist%3) {
        1: return 8;
        return 2;
    }

    // Make a 12 car set by adjusting sprite size to 1-1-8-2
    switch(FEAT_TRAINS, SELF, sw_0_series_shorten_12_car_vehicle, position_in_consist%4) {
        2: return 8;
        3: return 2;
        return 1;
    }

switch(FEAT_TRAINS, SELF, sw_0_series_length, cargo_subtype) {
    2: sw_0_series_shorten_12_car_vehicle;      // Nose Set
    sw_0_series_length_standard;                // All other 16-length sets
}

/* STATS */

    // NUMBER OF CARS 

    switch(FEAT_TRAINS, SELF, sw_0_series_number_cars, cargo_subtype) {
        2: return 12;     // Weight of a 9.0 tile long JapanSet 0 Series
        return 16;        // Weight of a 12.0 tile long JapanSet 0 Series
    }

    // CARGO CAPACITY

    // Passenger Capacities for each parameter level
    switch(FEAT_TRAINS, SELF, sw_0_series_param_cargo_capacity, param_basecapacity) {
        // Assuming 65 capacity per car if it was 0.5 tile (same as JapanSet)
        0: return 52;       // Low Capacity
        2: return 78;       // High Capacity
        3: return 91;       // Very High Capacity
        return 65;          // Normal Capacity 
    }

    // Scaling factor for each length of consist
    switch(FEAT_TRAINS, SELF, sw_0_series_cargo_capacity_factor, cargo_subtype) {
        2: return 3750;     // Length 12 (9 tiles)
        return 5000;        // Length 16 (12 tiles)
    }

    switch(FEAT_TRAINS, SELF, sw_0_series_cargo_capacity, (sw_0_series_param_cargo_capacity() * sw_0_series_cargo_capacity_factor() ) / 10000 )
        {return;}

    // RUNNING COSTS
    switch(FEAT_TRAINS, SELF, sw_0_series_running_costs, (sw_0_series_number_cars() * 100 ) )
            {return;}

    // WEIGHT
    switch(FEAT_TRAINS, SELF, sw_0_series_weight, (sw_0_series_number_cars() * 61 ) )   // Number of cars for each cargo subtype x weight (t)
        {return;}

    // POWER
    switch(FEAT_TRAINS, SELF, sw_0_series_power, (sw_0_series_number_cars() * 1000 ) )   // Number of cars for each cargo subtype x power (hp)
        {return;}

    // SPEED
    switch (FEAT_TRAINS, SELF, sw_0_series_speed, current_year) {
	    0..1986: return 210;                        // Until 1986, Speed = 210 km/h
	    return 220;                                 // After 1986, Speed = 220 km/h
    }

    // COST FACTOR
    /*
    switch(FEAT_TRAINS, SELF, sw_0_series_cost_factor, cargo_subtype) {
        2: return 300;     // Length 12 (9 tiles)
        return 400;        // Length 16 (12 tiles)
    }
    */
    // REFIT COST

    switch(FEAT_TRAINS, SELF, sw_0_series_refit_cost_minus2, cargo_subtype) {
        2: return 7;       // Currently 'Nose', Cost to move to 'Year Dependent Livery'       
        return 0;
    }
    
    switch(FEAT_TRAINS, SELF, sw_0_series_refit_cost_minus1_check, cargo_subtype) {
        3: return -6;       // Currently 'Kodama', Refund to move to 'Nose'     
        return 0;           // Currently 'Original' moving to 'Year Dependent'    
    }

    switch(FEAT_TRAINS, SELF, sw_0_series_refit_cost_minus1, cargo_subtype) {
        2: return 7;       // Currently 'Nose', Cost to move to 'Original'     
        sw_0_series_refit_cost_minus1_check;
    }

    switch(FEAT_TRAINS, SELF, sw_0_series_refit_cost_plus1_check, cargo_subtype) {
        1: return -6;       // Currently 'Original', Refund to move to 'Nose'               
        return 0;           // Currently 'Year Dependent' moving to 'Original' 
    }

    switch(FEAT_TRAINS, SELF, sw_0_series_refit_cost_plus1, cargo_subtype) {
        2: return 7;       // Currently 'Nose', Cost to move to 'Kodama'               
        sw_0_series_refit_cost_plus1_check;
    }

    switch(FEAT_TRAINS, SELF, sw_0_series_refit_cost_plus2, cargo_subtype) {
        0: return -6;      // Currently 'Year Depedent', Refund to move to    
        return 0;
    }

    switch(FEAT_TRAINS, SELF, sw_0_series_refit_cost, var[0x10,8,0xFF] - cargo_subtype) {
        /* Refit cost based on difference between target cargo sybtype and current cargo subtype.
	    Refitting to fewer carriages refunds money, while adding carriages costs (more) money.    */    
	    -3:             0; 
        -2:				sw_0_series_refit_cost_minus2;
	    -1:				sw_0_series_refit_cost_minus1;
	    0:				0;
	    1:				sw_0_series_refit_cost_plus1;
	    2:				sw_0_series_refit_cost_plus2;
        3:              0;
	    return CB_FAILED;
    }
