
/* Midcars */

/* Standard */

    // Panto in middle
    switch (FEAT_TRAINS, SELF, sw_e2_series_standard_panto_in_middle_backwards, (position_in_consist == position_in_consist_from_end ) || (position_in_consist - 3 == position_in_consist_from_end)) {				
    	0:  sw_e2_series_coac2b;
		sw_e2_series_pantob;				
	}

    switch (FEAT_TRAINS, SELF, sw_e2_series_standard_panto_in_middle_forwards, (position_in_consist == position_in_consist_from_end ) || (position_in_consist - 3 == position_in_consist_from_end)) {				
		0:  sw_e2_series_coac2f;
		sw_e2_series_pantof;				
	}

    // 4th and 6th
    switch (FEAT_TRAINS, SELF, sw_e2_series_standard_4th_and_6th_backwards, position_in_consist_from_end == 10 || position_in_consist_from_end == 16) {				
		0:  sw_e2_series_coac2b;
		sw_e2_series_pantob;				
	}

    switch (FEAT_TRAINS, SELF, sw_e2_series_standard_4th_and_6th_forwards, position_in_consist == 10 || position_in_consist  == 16) {				
		0:  sw_e2_series_coac2f;
		sw_e2_series_pantof;				
	}

    // 4th and 5 from end
    switch (FEAT_TRAINS, SELF, sw_e2_series_standard_4th_and_5_from_end_backwards, position_in_consist_from_end == 10 || position_in_consist  == 13) {				
		0:  sw_e2_series_coac2b;
		sw_e2_series_pantob;				
	}

    switch (FEAT_TRAINS, SELF, sw_e2_series_standard_4th_and_5_from_end_forwards, position_in_consist == 10 || position_in_consist_from_end  == 13) {				
		0:  sw_e2_series_coac2f;
		sw_e2_series_pantof;				
	}

    // Length Check
    switch (FEAT_TRAINS, SELF, sw_e2_series_standard_lengthcheck_backwards, num_vehs_in_consist ) {				
			1..23:  sw_e2_series_standard_panto_in_middle_backwards;
            24..30: sw_e2_series_standard_4th_and_6th_backwards;
			sw_e2_series_standard_4th_and_5_from_end_backwards;				
		}

    switch (FEAT_TRAINS, SELF, sw_e2_series_standard_lengthcheck_forwards, num_vehs_in_consist ) {				
			1..23:  sw_e2_series_standard_panto_in_middle_forwards;
            24..30: sw_e2_series_standard_4th_and_6th_forwards;
			sw_e2_series_standard_4th_and_5_from_end_forwards;				
		}

/* 200 Series */

    // Short
        switch (FEAT_TRAINS, SELF, sw_e2_series_200_short_backwards, position_in_consist_from_end ) {				
            4:  sw_e2_series_coac2b;    // 2
            //7:  panto
            10: sw_e2_series_coac3b;    // 4
            13: sw_e2_series_coac4b;    // 5
            //16: panto
            19: sw_e2_series_coac6b;    // 7 
            22: sw_e2_series_coac4b;    // 8
            25: sw_e2_series_coac3b;    // 9
            sw_e2_series_pantob;		// 3 & 6		
        }

        switch (FEAT_TRAINS, SELF, sw_e2_series_200_short_forwards, position_in_consist ) {				
            4:  sw_e2_series_coac2f;    // 2
            //7:  panto
            10: sw_e2_series_coac3f;    // 4
            13: sw_e2_series_coac4f;    // 5
            //16: panto
            19: sw_e2_series_coac6f;    // 7
            22: sw_e2_series_coac4f;    // 8
            25: sw_e2_series_coac3f;    // 9
            sw_e2_series_pantof;		// 3 & 6		
        }

    // Long
        switch (FEAT_TRAINS, SELF, sw_e2_series_200_long_backwards, (position_in_consist_from_end - 3 ) % 24 ) {				
            1:  sw_e2_series_coac2b;    // 2
            //4:  panto
            7:  sw_e2_series_coac3b;    // 4
            10: sw_e2_series_coac4b;    // 5
            //13: panto
            16: sw_e2_series_coac6b;    // 7 
            19: sw_e2_series_coac4b;    // 8
            22: sw_e2_series_coac3b;    // 9
            sw_e2_series_pantob;		// 3 & 6		
        }

        switch (FEAT_TRAINS, SELF, sw_e2_series_200_long_forwards, (position_in_consist - 3 ) % 24 ) {				
            1:  sw_e2_series_coac2f;    // 2
            //4:  panto
            7:  sw_e2_series_coac3f;    // 4
            10: sw_e2_series_coac4f;    // 5
            //13: panto
            16: sw_e2_series_coac6f;    // 7 
            19: sw_e2_series_coac4f;    // 8
            22: sw_e2_series_coac3f;    // 9
            sw_e2_series_pantof;		// 3 & 6		
        }

    // Length Check
        switch (FEAT_TRAINS, SELF, sw_e2_series_200_lengthcheck_backwards, num_vehs_in_consist ) {				
                1..23:  sw_e2_series_200_short_backwards;
                sw_e2_series_200_long_backwards;				
            }

        switch (FEAT_TRAINS, SELF, sw_e2_series_200_lengthcheck_forwards, num_vehs_in_consist ) {				
                1..23:  sw_e2_series_200_short_forwards;
                sw_e2_series_200_long_forwards;				
            }

/* Midcar Selection */
    // Cargo Subtype & Direction
    switch (FEAT_TRAINS, PARENT, sw_e2_series_reversed, cargo_subtype ) {				
			3:  sw_e2_series_200_lengthcheck_backwards;
			sw_e2_series_standard_lengthcheck_backwards;				
		}

    switch (FEAT_TRAINS, PARENT, sw_e2_series_not_reversed, cargo_subtype ) {				
			3:  sw_e2_series_200_lengthcheck_forwards;
			sw_e2_series_standard_lengthcheck_forwards;				
		}

    switch (FEAT_TRAINS, PARENT, sw_e2_series_midcars, vehicle_is_reversed ) {				
			1:  sw_e2_series_reversed;
			sw_e2_series_not_reversed;				
		}

/* Cab selection */
    // Rear cab
    switch (FEAT_TRAINS, PARENT, sw_e2_series_rear, vehicle_is_reversed) {				
            1:  sw_e2_series_cab01b;                   // cab01	
            sw_e2_series_cab02f;                       // cab02
        }

    // Lead cab
    switch (FEAT_TRAINS, PARENT, sw_e2_series_lead, vehicle_is_reversed) {				
            1:  sw_e2_series_cab02b;                   // cab02
            sw_e2_series_cab01f;                       // cab01	
        }

/* Find the cabs */
    switch (FEAT_TRAINS, SELF, sw_e2_series_lead_or_rear, position_in_consist) {				
            1:  sw_e2_series_lead;
            sw_e2_series_rear;				
        }
    
    switch (FEAT_TRAINS, SELF, sw_e2_series_ends, position_in_consist == 1 || position_in_consist_from_end == 1) {				
            1:  sw_e2_series_lead_or_rear;
            sw_e2_series_midcars;				
        }
